This is the Read Me for gRPC Implementation on Google Cloud. 

For GRPC server implementation on Kubernetes cluster, run the following commands:
	a. First, enter the server directory, run-
	-> cd server

	b. After making any changes to proto file for RPC calls, to generate a new api_descriptor.pb file, run-
	-> python -m grpc.tools.protoc --include_imports --include_source_info --proto_path=protos --python_out=. --grpc_python_out=. --descriptor_set_out=api_descriptor.pb helloworld.proto
	
	b. Deploy your service config to Service Management:
	-> gcloud endpoints services deploy api_descriptor.pb api_config.yaml

	c. Enable the Cloud Build API:
	-> gcloud services enable cloudbuild.googleapis.com

	d. Build a docker image for your gRPC server, and store it in your Registry:
	-> gcloud builds submit --tag asia.gcr.io/kubernetes-practice-290405/hello-grpc:latest .

	e. Deploy to GKE:
	-> kubectl create -f ./deployment.yaml
	
	f. Get IP of load balancer, run until you see an External IP:
	-> kubectl get svc hello
	
	g. Also get an API key from the Console's API Manager for use in the client later.
	-> From Google Cloud Dashboard -> APIs & Services -> Credentials -> Create Credentials -> Api Key
	For our Project, we already have generated one Api, so we will use that instead of following this step.

	h. Run the client:
	-> python greeter_client.py --host=<IP of GKE LoadBalancer>:80 --api_key=<API Key from Console>
	You can directly use 
	-> python greeter_client.py --host=104.199.152.176:80 --api_key=AIzaSyCWGpNzPKcPi6KIW0jOPYUeE0PUDuWJpT0